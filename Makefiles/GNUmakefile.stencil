#
# General Makefile
#
# Required elements:
#     1) specify src_dirs: list of directories where source code can be found
#
#     2) choose if using the probin and/or info modules (build_probin, build_info)
#            these choices have implications for dependencies and what is built
#
#            the default behavior is to not use either one
#
#     3) specify any modules that the dependency checker should skip, default is none
#
#     4) choose compiler, flags, include dirs, library dirs, etc.
#
#     5) set MAKEFILE_HOME_DIR at the bottom
#
#     6) include the main makefile machinery
#
# A minimal working example for a Makefile could include only 4 lines:
#     src_dirs := <list of directories>
#     f90_compiler := GNU
#     MAKEFILE_HOME_DIR := /path/to/FortranDep/Makefiles
#     include $(MAKEFILE_HOME_DIR)/GMain.mak
#
# Included targets to help with cleaning:
#     clean
#         -removes all compiled object files
#     realclean
#         -all elements of clean
#         -removes the build directory
#         -removes the executable
#     purge
#         -all elements of realclean
#         -removes all files matching "*.exe"
#
# Below are all the user-available options and a short description. Any entry
# whose value is listed as REQUIRED needs to be changed by the user. All
# other variables are shown with their default value.
#

##########################################################################
# what to build
##########################################################################

# space-separated list of directories that hold source files
src_dirs := REQUIRED

# determine whether to use the crude input parameter namelist option.
# this is awesome for quick/dirty projects, but not refined enough for
# complex ones
build_probin :=
namelist_name := input

# determine whether to use the crude build-info module to make compiler
# information available in the Fortran code through a module
build_info :=

# executable basename, will be modified unless "do_not_modify_exe_name := t"
# an example modification would be: xmain.Linux.gfortran.debug.exe
exe_base := main
do_not_modify_exe_name :=

# set what source files to include in the build. There are two options:
#     1) have the build system automatically find the source files,
#        this could lead to processing far more files than is necessary
#
#        this is the default and requires no changes, it will find *.f90 and *.F90
#
#     2) explicitly tell build system what files to process.
#        each directory should have a file called "GPackage.mak" that
#        defines the source files to include. It is formatted as follows:
#            f90sources += filename1.f90
#            f90sources += filename2.F90
#            sf90sources += filename3.F90
#        with one entry per line and the path to the file is not required.
#        entries that use "sf90sources" will not go through the dependency checker.
#        both "*.f90" and "*.F90" extensions are supported.
find_GPackage_files :=

##########################################################################
# dependencies
##########################################################################
# list of modules to skip when running through the automated dependency
# generator. if a file contains:
#       use omp
#       use mpi
#       use my_freq
# and the skip-modules variable is set to:
#       skip_modules := omp mpi
# then the generator will not search for a file that contains a module 
# named "omp" or a file containing module named "mpi" but it will search 
# for a file containing module "my_freq". This allows "system" modules
# to still be used.
skip_modules :=

##########################################################################
# how to build
##########################################################################

# run in debug mode, determines which default flags to use
debug :=

# what command will run a python script, e.g., python, python3, python2, etc.
python_exe := python

#-------------------------------------------------------------------------
# Compiler Settings
#-------------------------------------------------------------------------
# Fortran compiler (choices are "GNU" or "Intel" so far)
f90_compiler := REQUIRED

# compiler executable that will be used to do compile/linking stages
# defaults to "gfortran" or "ifort" based on value of f90_compiler
#compiler_exe := /some/user/defined/prefix/gfortran

# specify directory where the compiled files will go
build_dir := _build

# set compiler flags manually or leave blank to use defaults. defaults
# only exist for Intel and GNU compilers.
# if manually setting, a useful block to include will be
#     ifdef debug
#       f90_flags := <set debug flags here>
#     else
#       f90_flags := <set optimized flags here>
#     endif
f90_flags :=

# include the OpenMP compiler flag, only used if f90_flags is not set
OMP :=

# include extra flags (these will always be added on)
xtr_f90_flags :=

# set include directories, e.g., -I<some dir>
include_flags :=

# set library flags here, e.g., -L<some dir> -llib1 -llib2 libmylib.so
library_flags :=

#-------------------------------------------------------------------------
# Preprocessor Settings
#-------------------------------------------------------------------------
# space separated list of places where the preprocessor can find "#include" files
pp_search_paths :=

# space separated list of user defined preprocessor macros
# each macro should be name=value, with no spaces, for example
#     pp_macros := INTEL_COMPILER=1 OUTPUT_DIR=/home/user/
pp_macros :=

##########################################################################
# include the rest of the Makefile
##########################################################################
# this variable must be defined and point to the top Makefile directory
MAKEFILE_HOME_DIR := REQUIRED

# REQUIRED: this line needs no modification, but must be included
include $(MAKEFILE_HOME_DIR)/GMain.mak

