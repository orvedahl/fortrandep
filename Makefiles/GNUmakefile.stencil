#
# General Makefile
#
# Required elements:
#     1) specify src_dirs: list of directories where source code can be found
#
#     2) choose compiler
#
#     3) set MAKEFILE_HOME_DIR so it points to the directory containing this stencil
#
#     4) include the main makefile machinery
#
# A minimal working example is found in "GNUmakefile.stencil.minimal"
#
# Included targets to help with cleaning:
#     clean
#         -removes all compiled object files
#     realclean
#         -all elements of clean
#         -removes the build directory
#         -removes the executable
#     purge
#         -all elements of realclean
#         -removes all files matching "*.exe"
#
# Below are all the user-available options and a short description. Any entry
# whose value is listed as REQUIRED needs to be changed by the user. All
# other variables are shown with their default value
#

##########################################################################
# what to build
##########################################################################

# Space-separated list of directories that hold source files. Both relative
# and absolute paths are supported
src_dirs := REQUIRED

# Determine whether to use the crude input parameter namelist option.
# This is great for quick/dirty projects, but not refined enough for
# complex ones
build_probin :=
namelist_name := input

# Determine whether to use the crude build-info module to make compiler
# information available in the Fortran code through a module
build_info :=

# Executable basename, will be modified unless "do_not_modify_exe_name := t"
# an example modification would be: xmain.Linux.gfortran.debug.exe
exe_base := main
do_not_modify_exe_name :=

# Set what source files to include in the build. There are two options:
#     1) Have the build system automatically find the source files, this could
#        lead to processing far more files than are actually used in the project
#        (see note below about sf90sources to avoid some of this)
#
#        this is the default and requires no changes, it will find *.f90 and *.F90
#
#     2) Explicitly tell build system what files to process.
#        Each directory should have a file called "GPackage.mak" that
#        defines the source files to include. It is formatted as follows:
#            f90sources += filename1.f90
#            f90sources += filename2.F90
#            sf90sources += filename3.F90
#        with one entry per line and the path to the file is not required.
#        Entries that use "sf90sources" will not go through the dependency checker,
#        but will be included. Both "*.f90" and "*.F90" extensions are supported
find_GPackage_files :=

# Do not include or process these files. Only used if "find_GPackage_files := "
# Space-separated list of relative filenames to ignore and filter out
ignore_files :=

##########################################################################
# dependencies
##########################################################################
# List of modules to skip when running through the automated dependency
# generator. If a file contains:
#       use omp
#       use mpi
#       use my_freq
# and the skip-modules variable is set to:
#       skip_modules := omp mpi
# then the generator will not search for a file that contains a module 
# named "omp" or a file containing module named "mpi" but it will search 
# for a file containing module "my_freq". This allows "system" modules
# to still be used
skip_modules :=

##########################################################################
# how to build
##########################################################################

# Run in debug mode, determines which default flags to use
debug :=

# What command will run a python script, e.g., python, python3, python2, etc.
python_exe := python

#-------------------------------------------------------------------------
# Compiler Settings
#-------------------------------------------------------------------------
# Fortran compiler (choices are "GNU" or "Intel" or "PGI" or "Custom")
f90_compiler := REQUIRED

# Compiler executable that will be used to do compile/linking stages
# defaults to "gfortran", "ifort", or "pgfortran" based on value of f90_compiler
#compiler_exe := /some/user/defined/prefix/gfortran

# Specify directory where the compiled files will go
#     Module files will be placed in $(build_dir)/$(sub_dir)/m
#     Object files will be placed in $(build_dir)/$(sub_dir)/o
# The sub_dir default is system dependent, e.g., "Linux.intel" or "Linux.gfortran.debug"
build_dir := _build
sub_dir :=

# Set compiler flags manually or leave blank to use defaults. Defaults
# only exist for Intel, GNU, and NVIDIA HPC compilers.
# If manually setting, a useful block to include will be
#     ifdef debug
#       f90_flags := <set debug flags here>
#     else
#       f90_flags := <set optimized flags here>
#     endif
f90_flags :=

# Include the OpenMP compiler flag, only used if f90_flags is not set
OMP :=

# Include extra flags (these will always be added on, regardless of debug state)
xtr_f90_flags :=

# Set include directories, e.g., -I<some dir>
include_flags :=

# Set library flags here, e.g., -L<some dir> -llib1 -llib2 libmylib.so
library_flags :=

#-------------------------------------------------------------------------
# Preprocessor Settings
#-------------------------------------------------------------------------
# these settings are specific to the python dependency checker, not the "actual"
# preprocessor that is called before compiling each file. The python script needs
# to know what macros have been defined and where to find included files in order
# to determine what code to parse. The defined macros and search paths must still
# be sent to the compiler, therefore a useful block to use will be
#     # user defined macros
#     defined_macros := INTEL_COMPILER=1 OUTPUT_DIR=/home/user/
#
#     # tell python the macro definitions
#     pp_macros := $(defined_macros)
#
#     # tell C-preprocessor the macro definitions, most compilers use "-Dvariable=value"
#     xtr_f90_flags += $(addprefix -D, $(defined_macros))

# Space-separated list of user defined preprocessor macros
# each macro should be name=value, with no spaces, for example
#     pp_macros := INTEL_COMPILER=1 OUTPUT_DIR=/home/user/
pp_macros :=

# Space-separated list of places where the preprocessor can find "#include" files
pp_search_paths :=

##########################################################################
# include the rest of the Makefile
##########################################################################
# This variable must be defined and point to the top Makefile directory
MAKEFILE_HOME_DIR := REQUIRED

# REQUIRED: this line needs no modification, but must be included
include $(MAKEFILE_HOME_DIR)/GMain.mak

